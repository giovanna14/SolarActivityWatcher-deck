summary(mdl5)
mdl4 <- lm(mpg ~ wt + hp+factor(cyl), data=mtcars)
summary(model4)
summary(mdl4)
plot(mdl4,which=1)
mdl4 <- lm(mpg ~ wt + hp+ drat+factor(cyl), data=mtcars)
summary(mdl4)
mdl4 <- lm(mpg ~ wt + drat+factor(cyl), data=mtcars)
summary(mdl4)
mdl4 <- lm(mpg ~ wt + qsec +factor(cyl), data=mtcars)
summary(mdl4)
mdl4 <- lm(mpg ~ wt + factor(vs) +factor(cyl), data=mtcars)
summary(mdl4)
mdl4 <- lm(mpg ~ wt + hp+factor(vs) +factor(cyl), data=mtcars)
summary(mdl4)
mdl4 <- lm(mpg ~ wt + hp+factor(gear) +factor(cyl), data=mtcars)
summary(mdl4)
mdl4 <- lm(mpg ~ wt + hp+factor(gear), data=mtcars)
summary(mdl4)
mdl4 <- lm(mpg ~ wt + hp+factor(carb), data=mtcars)
summary(mdl4)
mdl4 <- lm(mpg ~ wt + hp+factor(cyl)+factor(carb), data=mtcars)
summary(mdl4)
plot(mdl4)
mdl6 <- lm(mpg~ wt + factor(cyl), data=mtcars)
mdl7 <- lm(mpg~wt+hp+factor(cyl),data=mtcars)
anova(mdl6,mdl7)
mdl6 <- lm(mpg~ wt + factor(cyl), data=mtcars)
mdl7 <- lm(mpg~wt+hp+factor(cyl),data=mtcars)
anova(mdl6,mdl2,mdl7)
mdl6 <- lm(mpg~ wt + factor(cyl), data=mtcars)
mdl7 <- lm(mpg~wt+hp+factor(cyl),data=mtcars)
anova(mdl6,mdl3,mdl7)
mdl7 <- lm(mpg~wt+disp+hp+factor(cyl),data=mtcars)
mdl6 <- lm(mpg~ wt + factor(cyl), data=mtcars)
mdl7 <- lm(mpg~wt+hp+factor(cyl),data=mtcars)
anova(mdl6,mdl3,mdl7)
anova(mdl6,mdl3,mdl7)
mdl8 <- lm(mpg~wt+disp+hp+factor(cyl),data=mtcars)
anova(mdl6,mdl3,mdl8)
t.test(mtcars$mpg[mtcars$am == 0],mtcars$mpg[mtcars$am == 1])
?confint
library(MASS)
?shuttle
head(shuttle)
tail(shuttle)
?glm
glm(use ~ wind, data ="shuttle", family="binomial")
class(shuttle$use)
class(shuttle$wind)
head(as.numeric(shuttle$use))
tail(as.numeric(shuttle$use))
tail(shuttle$use)
head(as.numeric(shuttle$wind))
head(shuttle$wind)
logmod <- glm(as.numeric(use) ~ wind, data ="shuttle", family="binomial")
logmod <- glm(use ~ as.numeric(wind), data ="shuttle", family="binomial")
glm(use ~ wind, data =shuttle, family="binomial")
glm(use ~ wind, data =shuttle, family="binomial") -> logmod
summary(logmod)
exp(logmod$coeff)
exp(confint(logmod))
logmod2 <- update(logmod, ~ . +magn)
summary(logmod2)
exp(logmod2$coeff)
logmod3 <- glm(I(1-use)~wind,data=shuttle,family="binomial")
logmod3 <- glm(I(1-as.numric(use))~wind,data=shuttle,family="binomial")
logmod3 <- glm(I(1-as.numeric(use))~wind,data=shuttle,family="binomial")
autolander <- use == "auto"
autolander <- shuttle$use == "auto"
summary(autolander)
as.numeric(autolander)
autolander <- as.numeric(autolander)
logshuttle1 <- glm(autolander ~ wind, data=shuttle, family="binomial")
logshuttle1 <- glm(I(1-autolander) ~ wind, data=shuttle, family="binomial")
summary(logshuttle1)
logshuttle1 <- glm(autolander ~ wind, data=shuttle, family="binomial")
logshuttle2 <- glm(I(1-autolander) ~ wind, data=shuttle, family="binomial")
summary(logshuttle1)
data(InsectSpray)
data("InsectSpray")
?data
library(useR)
library(usingR)
library(UsingR)
?dataset
?datasets
library(help="datasets")
data(InsectSprays)
head(InsectSprays)
tail(InsectSprays)
str(InsectSprays)
logInsectSprays <- glm(count ~ spray, data=InsectSprays,family="poisson")
summary(logInsectSprays)
exp(logInsectSprays$coeff)
1.0574713/14.5000000
attach(InsectSprays)
mean(count[spray=="A"])
mean(count[spray=="B"])
mean(count[spray=="A"])/mean(count[spray=="B"])
exp(2.67415-0.05588)
exp(2.67415+0.05588)
exp(logInsectSprays$coeff[0])/exp(logInsectSprays$coeff[1])
exp(logInsectSprays$coeff[1])/exp(logInsectSprays$coeff[2])
exp(logInsectSprays$coeff[1])*exp(logInsectSprays$coeff[2])
exp(logInsectSprays$coeff[1])*exp(logInsectSprays$coeff[2]) / exp(logInsectSprays$coeff[1])
exp(logInsectSprays$coeff[1]) /(exp(logInsectSprays$coeff[1])*exp(logInsectSprays$coeff[2]))
exp(logInsectSprays$coeff[1])
exp(logInsectSprays$coeff[1]) /(exp(logInsectSprays$coeff[1] + logInsectSprays$coeff[2]))
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
knot <-0
splT <- sapply(knot, function(knot) (x> knot) * (x-knot))
xMat <<- cbind(1,x,splT)
yhat <- predict(lm(y~xMat -1))
plot(x,y,pch=21,cex=2)
lines(x,yhat,col="red",lwd=2)
lm(y~xMat -1)
lm(y~xMat)
1/0.969
2.037-1.024
counts <- rnorm(100)
x <- rep(c(1,0),50)
length(x)
xf <- as.factor(x)
head(xf)
t <- log(3)
glm(count~x +t)
glm(count~x +t, family=poisson)
glm(counts~x +t, family=poisson)
length(counts)
length(t)
glm(counts~I(x +t), family=poisson)
counts <- rnorm(100,300,1)
counts[<0]
counts<0
glm(counts~I(x +t), family=poisson)
glm(counts~I(x +t+log(10)), family=poisson)
glm(counts~ x, offset=t, family=poisson)
t <- rep(t,100)
glm(counts~ x, offset=t, family=poisson)
glm(counts~ x, offset=t+log(10), family=poisson)
4.605052 - log(19)
4.605052 - log(10)
library("swirl")
ls()
rm(list=ls())
swirl()
var(rpois(1000,50))
nxt()
View(hits)
class(hits[,'date'])
as.integer(hits[,'date'])
as.integer(head(hits[,'date'])
)
mdl <- glm(visits ~ date, family=poisson, data=hits)
summary(mdl)
exp(confint(mdl,'date'))
which.max(hits[,'visits'])
hits[704,]
lambda <- mdl$fitted.values[704]
qpois(.95,lambda)
mdl2 <- glm(visits ~ date, offset=log(visits+1),family=poisson, data=hits)
mdl2 <- glm(simplystats ~ date, offset=log(visits+1),family=poisson, data=hits)
qpois(0.95,mdl2$fitted.values[704])
q()
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
testIndex = createDataPartition(diagnosis, p=0.50, list=FALSE)
training = adData[-testIndex,]
testing = adData[testIndex,]
str(training)
str(testing)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
str(segmentationOriginal)
testset <- segmentationOriginal[,segmentationOriginal$Case==1]
trainset <- segmentationOriginal[,segmentationOriginal$Case==2]
dim(testset)
dim(trainset)
dim(segmentationOriginal)
trainset <- segmentationOriginal[,segmentationOriginal$Case=="Train"]
trainset <- segmentationOriginal[segmentationOriginal$Case=="Train",]
testset <- segmentationOriginal[segmentationOriginal$Case=="Test",]
dim(trainset)
dim(testset)
set.seed(125)
?CART
??CRT
??CART
str(training[,1:6])
str(trainset[,1:6])
str(trainset[,1:8])
?rpart
rpart1 <- rpart(Class ~ .,data = trainset)
library(rpart)
rpart1 <- rpart(Class ~ .,data = trainset)
rpart1
rm(rpart1)
library(caret)
set.seed(125)
fit <- train(Class ~ ., data=trainset,method="rpart")
fit
print(fit$finalModel)
predict(fit,newdata=testset)
pred <- predict(fit,newdata=testset)
qplot(TotalIntench2,FiberWidthCh1, data=testset,colour="Class")
?predict
?predict.train
names(trainset)
qplot(TotalIntenCh2,FiberWidthCh1, data=testset,colour="Class")
extractPrediction(fit,testX=c(TotalIntenCh2==23000,FiberWidthCh1==10,PerimStatusCh1==2))
head(testset)
testx$TotalIntCh2 <- c(23000,50000,57000)
testx <- data.frame()
testx$TotalIntCh2 <- c(23000,50000,57000)
testx <- data.frame(3,3)
testx$TotalIntCh2 <- c(23000,50000,57000)
?data.frame
testx <- data.frame(row.names=c("TotalIntCh2","FiberWidthCh1","PerimStatusCh1"))
testx[1,]<- c(23000,10,2)
testx[1,1]<-23000
testx[1,2]<-10
testx[1,3]<-2
testx
rm(testx)
testx <- data.frame(column.names=c("TotalIntCh2","FiberWidthCh1","PerimStatusCh1"))
testx
testx[1,]<- c(23000,10,2)
testx[1,1]<-23000
rm(testx)
testx<-matrix(1,3,c(23000,10,2))
testx
rm(testx)
d <- data.frame(x=1,y=1:10)
d
testx <- data.frame(TotalIntenCh2=23000,FiberWidthCh1=10,PerimStatusCh1=2)
testx
predict(fit,newdata=testx
)
sttr(pred)
str(pred)
dim(pred)
length(pred)
testset[testset$TotalIntCh2==23000 & testset$FiberWidthCh1==10 & testset$PerimStatusCh1==2,]
testset[testset$TotalIntCh2==23000]
testx <- testset[1,]
testx[1,] <- NA
head(testx)
testx$TotalIntenCh2 <- 23000
testx$FiberWidthCh1 <- 10
testx$PerimStatusCh1 <- 2
pred.a <- predict(fit,newdata=testx)
pred.a
testx <- testset
testx$TotalIntenCh2 <- 23000
summary(testx$TotalIntenCh2)
testx$FiberWidthCh1 <- 10
testx$PerimStatusCh1 <- 2
pred.a <- predict(fit,newdata=testx)
summary(pred.a)
testx <- testset
testx$FiberWidthCh1 <- 10
testx$TotalIntenCh2 <- 50000
testx$VarIntenCh4 <- 100
pred.b <- predict(fit,newdata=testx)
summary(pred.b)
testx$TotalIntenCh2 <- 57000
testx$FiberWidthCh1 <- 8
pred.c <- predict(fit,newdata=testx)
summary(pred.c)
testx$VarIntenCh4 <- testset$VarIntenCh4
testx$VarIntenCh4 <- 100
testx$TotalIntenCh2 <- testset$TotalIntenCh2
testx$PerimStatusCh1 <- 2
pred.d <- predict(fit,newdata=testx)
summary(pred.d)
summary(testx$FiberWidthCh1)
summary(testx$VarIntenCh4)
summary(testx$PerimStatusCh2)
summary(testx$PerimStatusCh1)
summary(testx$TotalIntenCh2)
fit
fit$finalModel
fit1 <- as.party(fit)
library(partykit)
install.packages("partykit")
library(partykit)
fit1 <- as.party(fit)
fit1 <- as.party(fit$finalModel)
plot(fit1a)
plot(fit1)
library(ElemStatLearn)
library(pgmm)
data(olive)
olive = olive[,-1]
str(olive)
summary(olive$Area)
mod <- train(Area ~ .)
mod <- train(Area ~ .,data=olive)
mod <- train(Area ~ .,data=olive)
mod
mod$finalModel
pr <- predict(mod,newdata=as.data.frame(t(colMeans(olive))))
str(pr)
pr
set.seed(125)
mod2 <- train(Area ~ .,data=olive)
pr2 <- predict(mod,newdata=as.data.frame(t(colMeans(olive))))
pr2
pr2 <- predict(mod2,newdata=as.data.frame(t(colMeans(olive))))
pr2
hist(olive$Area)
mod2 <- train(Area ~ .,data=olive,method="rpart")
pr2 <- predict(mod2,newdata=as.data.frame(t(colMeans(olive))))
pr2
set.seed(125)
mod2 <- train(Area ~ .,data=olive,method="rpart")
pr2 <- predict(mod2,newdata=as.data.frame(t(colMeans(olive))))
pr2
class(mod)
mod2 <- train(Area ~ .,data=olive,method="tree")
?tree
install.packages("tree")
library(tree)
?tree
modtree <- tree(as.factor(Area) ~ ., data=olive)
summary(modtree)
modtree
predtree <- predict(modtree,newdata=as.data.frame(t(colMeans(olive))))
predtree
modtree <- tree(Area ~ ., data=olive)
summary(modtree)
predtree <- predict(modtree,newdata=as.data.frame(t(colMeans(olive))))
predtree
predtree2 <- predict(mod,newdata=as.data.frame(t(colMeans(olive))))
predtree2
predtree2 <- tree(mod,newdata=as.data.frame(t(colMeans(olive))))
predtree2
rm(predtree2)
library(MASS)
library(ISLR)
?Boston
names(Boston)
plot(medv ~ lstat, data=Boston)
fit1 <- lm(medv ~ lstat, data=Boston)
fit1
summary(fit1)
abline(fit1,col="red")
names(fit1)
confint(fit1)
predict(fit1,data.frame(lstat=c(5,10,15)),interval="confidence")
fit2 <- lm(medv ~ lstat + age,data=Boston)
summary(fit2)
fit3=lm(medv ~ ., Boston)
summary(fit3)
par(mfrow=c(2,2))
plot(fit3)
fit4 <-update(fit3,~ .-age-indus)
summary(fit4)
plot(fit4)
fit5 <- lm(medv ~ lstat*age, Boston)
summary(fit5)
fit6 <- lm(medv ~ lstat + I(lstat^2), Boston); summary(fit6)
plot(fit6)
attach(Bostob)
attach(Boston)
par(mfrow=c(1,1))
plot(medv~stat)
plot(medv~lstat)
points(lstat,fitted(fit6),col="red",pch=20)
?fitted
plot(medv~lstat)
points(lstat,fitted(fit6),col="red",pch=20)
fit7 = lm(medv ~ poly(lstat,4))
points(lstat,fitted(fit7),col="blue",pch=20)
plot(1:20,1:20,pch=1:20,cex=2)
?Carseats
names(Carseats)
str(Carseats)
?fix
fix(Carseats)
fit1 = lm(Sales ~ .+Income:Advertising+Age:Price,Carseats)
summary(fit1)
summary(Carseats)
summary(fit1)
?contrasts
contrasts(Carseats$ShelveLoc)
regplot = function(x,y){}
regplot = function(x,y){
fit=lm(y~x)
plot(x,y)
abline(fit,col="red")
}
attach(Carseats)
regplot(Price,Sales)
regplot=function(x,y,...){
fit=lm(y~x)
plot(x,y,...)
abline(fit,col="red")
}
regplot(Price,Sales,xlab="Price",ylab="Sales",col="blue",pch=20)
require(ISLR)
names(Smarket)
?Smarket
summary(Smrket)
summary(Smarket)
pairs(Smarket,col=Smarket$Direction)
glm.fit = glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Vome,data=Smarket,family=binomial)
glm.fit = glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume,data=Smarket,family=binomial)
summary(glm.fit)
glm.probs = predict(glm.fit,type="response")
glm.probs[1:5]
glm.pred = ifelse(glm.probs>0.5,"Up","Down")
glm.pred[1:5]
attach(Smarket)
table(glm.pred,Direction)
mean(glm.pred==Direction)
train <- Year<2005
glm.fit=glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume, data=Smarket,family=binomial,subset=train)
glm.probs=predict(glm.fit,newdata=Smarket[!train,],type="response")
glm.pred=ifelse(glm.probs>0.5,"Up","Down")
Direction.2005=Smarket$Direction[!train]
table(glm.pred,Direction.2005)
mean(glm.pred==Direction.2005)
glm.fit=glm(Direction~Lag1+Lag2, data=Smarket,family=binomial,subset=train)
glm.probs=predict(glm.fit,newdata=Smarket[!train,],type="response")
glm.pred=ifelse(glm.probs>0.5,"Up","Down")
table(glm.pred,Direction.2005)
mean(glm.pred==Direction.2005)
106/(76+106)
lda.fit=lda(Direction~Lag1+Lag2,data=Smarket,subset=Year<2005)
lda.fit
plot(lda.fit)
Smarket.2005=subset(Smarket,Year==2005)
lda.pred=predict(lda.fit,Smarket.2005)
lda.pred[1:5,]
lda.pred[1:5]
class(lda.pred)
data.frame(lda.pred)[1:5,]
table(lda.pred$class,Smarket.2005$Direction)
mean(lda.pred$class==Smarket.2005$Direction)
library(class)
?knn
attach(Smarket)
Xlag=cbind(Lag1,Lag2)
train=Year<2005
class(train)
head(train,3)
knn.pred=knn(Xlag[train,],Xlag[!train,],Direction[train],k=1)
table(knn.pred,Direction[!train])
mean(knn.pred==Direction[!train])
?Credit
data(Credit)
library(ISLR)
data(Credit)
(2*0)+(2*50)+(65*100)/(69*100)
(2*0)+(2*50)+(65*100)/69
((2*0)+(2*50)+(65*100))/(69*100)
((3*0)+(3*50)+(63*100))/(69*100)
((4*0)+(3*50)+(62*100))/(69*100)
q()
library(shiny)
runExample("01_hello")
runExample("02_text")
install.packages(c("BH", "BradleyTerry2", "car", "caret", "colorspace", "devtools", "digest", "dplyr", "evaluate", "forecast", "formatR", "Formula", "gbm", "ggplot2", "gtools", "highr", "Hmisc", "httr", "jsonlite", "KernSmooth", "knitr", "lazyeval", "magrittr", "manipulate", "markdown", "mime", "partykit", "pgmm", "plotrix", "plyr", "psych", "quantmod", "RANN", "RColorBrewer", "Rcpp", "RcppArmadillo", "RcppEigen", "RCurl", "reshape2", "rmarkdown", "RMySQL", "rstudioapi", "shiny", "stringr", "swirl", "tidyr", "yhatr", "zoo"))
library(shiny)
system.file("examples",package="shiny")
runExample("06_tabsets")
setwd("/data1/Datascitoolbox/Rwork/DevDataProd")
library(shiny)
runApp("mytests2")
library(shiniapps)
library(shinyapps)
?deployApp
deployApp("Solar_activity_watcher")
deployApp("mytests2")
library(shiny)
setwd("/home/giovanna/datasciencecoursera/DevDataProd_CourseProject")
deployApp()
setwd("Solar_activity_watcher")
deployApp()
setwd("../")
runApp("Solar_activity_watcher")
getwd()
setwd("Solar_actvity_watcher")
dir
dir()
getwd()
setwd("Solar_activity_watcher")
deployApp()
getwe()
getwd()
setwd("/data1/Datascitoolbox/Rwork/DevDataProd/MySunWatcher")
dir()
library(slidify)
library(lubridate)
today()
day <- today()-1
day
class(day)
getwd()
setwd("../")
runApp("Solar_activity_watcher")
getwd()
setwd("MySunWatcher")
slidify("index.Rmd")
setwd("/home/giovanna/datasciencecoursera")
author("SolarActivityWatcher-deck")
